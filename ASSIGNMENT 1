#include <iostream>

int main() {
    int arr[3] = {10, 20, 30}; // An integer array with 3 elements
    int *ptr = arr; // Pointer to the first element of the array

    std::cout << "Displaying address using arrays:" << std::endl;
    for (int i = 0; i < 3; ++i) {
        std::cout << "&arr[" << i << "] = " << &arr[i] << std::endl;
    }

    std::cout << "\nDisplaying address using pointers:" << std::endl;
    for (int i = 0; i < 3; ++i) {
        std::cout << "ptr + " << i << " = " << ptr + i << std::endl;
    }

    return 0;
}






#include <iostream>
#include <string>

class Student {
private:
    std::string name;
    int age;
    std::string address;

public:
    // Constructor with default values
    Student() : name("unknown"), age(0), address("not available") {}

    // Function to set name and age
    void setInfo(const std::string& newName, int newAge) {
        name = newName;
        age = newAge;
    }

    // Function to set name, age, and address
    void setInfo(const std::string& newName, int newAge, const std::string& newAddress) {
        name = newName;
        age = newAge;
        address = newAddress;
    }

    // Function to display student information
    void displayInfo() const {
        std::cout << "Name: " << name << ", Age: " << age << ", Address: " << address << std::endl;
    }
};

int main() {
    // Create an array of 10 Student objects
    Student students[10];

    // Set information for each student
    students[0].setInfo("Alice", 20, "123 Main St");
    students[1].setInfo("Bob", 22, "456 Elm Ave");
    // ... (set info for other students)

    // Print information for all students
    for (const auto& student : students) {
        student.displayInfo();
    }

    return 0;
}








#include <iostream>

// Function to input elements into the array
void inputElements(int* arr, int n) {
    std::cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; ++i) {
        std::cin >> *(arr + i); // Equivalent to arr[i]
    }
}

// Function to sort the array in ascending order
void sortArray(int* arr, int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (*(arr + j) > *(arr + j + 1)) {
                // Swap elements
                int temp = *(arr + j);
                *(arr + j) = *(arr + j + 1);
                *(arr + j + 1) = temp;
            }
        }
    }
}

// Function to print the sorted array
void printArray(const int* arr, int n) {
    std::cout << "Sorted elements:\n";
    for (int i = 0; i < n; ++i) {
        std::cout << *(arr + i) << " "; // Equivalent to arr[i]
    }
    std::cout << std::endl;
}

int main() {
    int n;
    std::cout << "Enter the number of elements: ";
    std::cin >> n;

    int* arr = new int[n]; // Dynamic memory allocation

    inputElements(arr, n);
    sortArray(arr, n);
    printArray(arr, n);

    delete[] arr; // Free allocated memory

    return 0;
}








#include <iostream>
#include <string>

class Student {
private:
    std::string name;
    int age;
    std::string address;

public:
    // Constructor with default values
    Student() : name("unknown"), age(0), address("not available") {}

    // Function to set name and age
    void setInfo(const std::string& newName, int newAge) {
        name = newName;
        age = newAge;
    }

    // Function to set name, age, and address
    void setInfo(const std::string& newName, int newAge, const std::string& newAddress) {
        name = newName;
        age = newAge;
        address = newAddress;
    }

    // Function to display student information
    void displayInfo() const {
        std::cout << "Name: " << name << ", Age: " << age << ", Address: " << address << std::endl;
    }
};

int main() {
    const int numStudents = 18;
    Student students[numStudents];

    // Set information for each student (you can customize this part)
    students[0].setInfo("Alice", 20, "123 Main St");
    students[1].setInfo("Bob", 22, "456 Elm Ave");
    // ... (set info for other students)

    // Print information for all students
    for (const auto& student : students) {
        student.displayInfo();
    }

    return 0;
}






